# CodeBuildのビルド仕様ファイル
version: 0.2

phases:
  # ビルド前の準備フェーズ
  pre_build:
    commands:
      # 必要な環境変数の存在確認
      - |
        if [ -z "$AWS_ACCOUNT_ID" ] || [ -z "$AWS_DEFAULT_REGION" ] || [ -z "$IMAGE_REPO_NAME" ] || [ -z "$CONTAINER_NAME" ]; then
          echo "必要な環境変数が設定されていません"
          echo "必要な環境変数: AWS_ACCOUNT_ID, AWS_DEFAULT_REGION, IMAGE_REPO_NAME, CONTAINER_NAME"
          exit 1
        fi
      # ECRへのログイン
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      # ログイン結果の確認
      - echo "ECR login status: $?"
      # コミットハッシュを取得（タグとして使用）
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      # 環境変数の確認
      - echo "AWS_ACCOUNT_ID: $AWS_ACCOUNT_ID"
      - echo "AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION"
      - echo "IMAGE_REPO_NAME: $IMAGE_REPO_NAME"
      - echo "IMAGE_TAG: $IMAGE_TAG"
      - echo "CONTAINER_NAME: $CONTAINER_NAME"
  
  # ビルドフェーズ
  build:
    commands:
      - echo "Build started on `date`"
      - echo "Building the Docker image..."
      # サーバーディレクトリに移動
      - cd server
      # Dockerイメージのビルドとタグ付け
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG -f Dockerfile.production .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      # イメージの確認
      - docker images | grep $IMAGE_REPO_NAME
  
  # ビルド後の処理フェーズ
  post_build:
    commands:
      - echo "Build completed on `date`"
      # ECRへのイメージプッシュ
      - echo "Pushing the Docker image..."
      - echo "Target ECR repository: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG"
      # プッシュ前にイメージの存在を確認
      - docker images | grep $IMAGE_REPO_NAME
      # プッシュ実行
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG || (echo "Docker push failed with status: $?" && exit 1)
      # イメージ定義ファイルの生成（CodeDeploy用）
      - echo "Writing image definitions file..."
      - printf '[{"name":"%s","imageUri":"%s"}]' "$CONTAINER_NAME" "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG" > ../imagedefinitions.json
      # アプリケーション仕様ファイルのコピー（CodeDeploy用）
      - cp appspec.yml ../appspec.yml

# アーティファクトの定義（CodePipelineの次のステージに渡すファイル）
artifacts:
  files:
    - imagedefinitions.json  # ECSデプロイ用のイメージ定義
    - appspec.yml           # CodeDeploy用のアプリケーション仕様
  name: build_output 